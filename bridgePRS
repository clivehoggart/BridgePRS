#!/usr/bin/env python3

########################################################################################################################################################################

import sys, os, argparse, platform, multiprocessing             
from   src.Python.Util.BridgeHelp import BridgeHelp
bridgeHelp = BridgeHelp()
HELP_FORMAT="%-50s %80s"
SUB_HELP_FORMAT="%-80s %10s"
class MyParser(argparse.ArgumentParser):
    def error(self, detail=None): #values=None,choice=None): #,settings = None):
        if bridgeHelp.evaluate_error(detail, sys.argv): sys.stderr.write(detail+'\n')  
        self.print_help() 
        sys.exit(2) 

    def dir_path(self,path):
        if not os.path.isdir(path): os.makedirs(path) 
        if not os.path.isdir(path+'/logs'): os.makedirs(path+'/logs') 
        if not os.path.isdir(path+'/tmp'): os.makedirs(path+'/tmp') 
        return path 

    def make_abs(self, path): 
        print(path)
        print(os.path.abspath(path)) 
        sys.exit() 


    def find_platform(self, p = 'NA'):
        if p == 'NA': 
            P1,P2 = platform.system().upper(), platform.platform().upper() 
            if P1[0:3] in ['MAC','DAR'] or P2[0:3] in ['MAC','DAR']: return 'mac' 
            if P1[0:3] in ['LIN','SER'] or P2[0:3] in ['LIN','SER']: return 'linux' 
            return p 
        else: 
            P = p.upper() 
            if P[0:3] in ['MAC','DAR']: return 'mac' 
            if P[0:3] in ['LIN','UNI','SER']: return 'linux' 
            return p  
        
    def force_caps(self,x): 
        return x.upper()

    def help_str(self,module):
        if module == 'prs-single':    return (HELP_FORMAT % ('Single Population PRS (Ridge Regression)',    './bridgePRS prs-single  run -o out --popname africa --pop_config afro_pop.config')) 
        if module == 'build':         return (HELP_FORMAT % ('Build large pop model to allow (port/bridge)','./bridgePRS build-model run -o out --popname euro   --pop_config euro_pop.config'))
        if module == 'prs-port':      return (HELP_FORMAT % ('Port PRS snp-weights from large to small pop','./bridgePRS prs-port    run -o out --popname afr    --model_file euro.model')) 
        if module == 'prs-prior':     return (HELP_FORMAT % ('Bridge snp-priors from large to small pop',   './bridgePRS prs-prior   run -o out --popname afr    --model_file euro.model'))
        if module == 'analyze':       return (HELP_FORMAT % ('Analyze One or More Results','./bridgePRS analyze result -o out --results out/afr.result')) 
        if module == 'easyrun':       return (HELP_FORMAT  % ('Run Following Five Modules Consecutively:','./bridgePRS easyrun go -o out --pop_config afro_pop.config eur_pop.config')) 
        if module == 'check':       return (HELP_FORMAT  % ('Check system requirements or input data','./bridgePRS check data --pop_config afro_pop.config')) 

    def sub_help_str(self, cmd, module=None):
        SUB_HELP_FORMAT="%-80s %10s"
        HS = ('INFO','INFO') 
        if cmd == 'run': HS =   ('Run The Following Module Commands:','') 
        elif cmd == 'go': HS = ('Run BridgePRS Sequentially: prs-single, build-model,prs-port,prs-prior,analyze','') 
        elif cmd == 'clump': HS = ('Load Sumstats Data, Produce SNP Clumps','') 
        elif cmd == 'beta': HS =  ('Evaluate SNP Clumps, Produce SNP Weights','') 
        elif cmd == 'predict': HS =  ('Apply SNP Weights, Produce Polygenic Predictions','') 
        elif cmd == 'quantify': HS =  ('Test Predictions, Produce Quantifiable Results','') 
        elif cmd == 'optimize': HS = ('Optimize SNP Weights,Produce Generalizable Predictions','') 
        elif cmd == 'prior': HS = ('Test Predictions,Produce SNP Prior Proability Matrix','') 
        elif cmd == 'result': HS = ('Analyze PRS Results','') 
        elif cmd == 'combine': HS = ('Combine And Analyze PRS Results','') 
        elif cmd == 'requirements': HS = ('Check System Requirements','') 
        elif cmd == 'data':         HS = ('Check Input Data','') 
        return(SUB_HELP_FORMAT % HS) 







# large 





###############################################################################################################################################


if __name__ == '__main__':
    #import sys, os, argparse, platform, multiprocessing             
    #from   src.Util.BridgeHelp import BridgeHelp
    parser=MyParser(formatter_class=argparse.RawTextHelpFormatter)
    subs = parser.add_subparsers(help=(HELP_FORMAT % ('Description','Example')),dest='module',title='Modules') 
    subs.required = True
    subs.formatter_class = argparse.RawTextHelpFormatter
    sub_help = (str(SUB_HELP_FORMAT % ('Description','')))
    
    # OPTIONS PARSERS # SUPPRESS

    Global =           MyParser(formatter_class=argparse.RawTextHelpFormatter,add_help=False)
    Global.formatter_class = argparse.RawTextHelpFormatter
    Global.add_argument('-o',             dest='outpath',      action='store',      type=parser.dir_path,default='out',help='Output path for bridgePRS') 
    Global.add_argument('--pop','--pops',    dest='pop',      nargs='+',      metavar='', type=parser.force_caps,default=[],required=False,help='Population Name(s)') 
    Global.add_argument('--cores',        dest='cores',        action='store',      type=int,default=0,metavar='',help='By default bridgePRS parralelized across (n-1) cores.') 
    Global.add_argument('--verbose',      dest='verbose',      action='store_true', default=False,  help='Toggle Verbose Mode On')
    Global.add_argument('--verify',       dest='verify',        action='store_true',   default=False,  help='Toggle Verify Mode On')
    Global.add_argument('--repeatSteps',  dest='repeatSteps',  action='store_true', default=False,  help='Toggle Repeat Pipeline Steps On') 
    Global.add_argument('--noPlots',      dest='noPlots',      action='store_true', default=False,  help='Skip Post-Pipeline Plotting Analysis') 
    Global.add_argument('--silent',       dest='silent',       action='store_true', default=False,  help=argparse.SUPPRESS) 
    #Global.add_argument('--spec', '--specifications',       dest='spec',       nargs = '+',         type=str,default=[],help='Axillary configuration/specification files') 
    Global.add_argument('--pop_config','--pop_configs',   dest='pop_config',   nargs = '+',           metavar='', type=str,default=[],help='Population configuration file(s)') 
    Global.add_argument('--platform',     dest='platform',     action='store',      type=parser.find_platform,  default=parser.find_platform("NA"), help='Force platform (Linux or MacOS)') 
    Global.add_argument('--rPath',        dest='rpath',        action='store',      type=str,  default='src/Rscripts', help=argparse.SUPPRESS) 
    Global.add_argument('--plinkPath',    dest='plinkpath',    action='store',      type=str,  default='src/Python/Xtra', help=argparse.SUPPRESS) 
    Global.add_argument('--ldPath',       dest='ldpath',       nargs='+',      type=str,   metavar = '', default=[], help=argparse.SUPPRESS) 
    #Global.add_argument('--ldPath',       dest='ldpath',       action='store',      type=str,  default='data/kg_sample/', help=argparse.SUPPRESS) 
    
    
    
    Single = MyParser(add_help=False)
    Single.formatter_class = argparse.RawTextHelpFormatter
    
    #Single.add_argument('--bfile_prefix',   dest = 'bfile_prefix',   action='store',type=str,default=None,metavar='',help='path to bfile prefix') 
    #Single.add_argument('--id_file',        dest = 'id_file',        action='store',type=str,metavar='',default=None,  help='sample id file') 
    Single.add_argument('--sumstats_prefix', dest = 'sumstats_prefix',action='store',type=str,default=None,metavar='',help='path to sumstats file prefixes') 
    Single.add_argument('--snp_file',       dest = 'snp_file',       action='store',type=str,metavar='',default=None,help='snp file') 
    Single.add_argument('--phenotype_files',    dest = 'phenotype_files',    nargs = '+', action = 'store', metavar='',type=str, default=[], help = 'phenotype test/validation data') 
   

    #SUMSTATS_PREFIX=pop_africa/sumstats/afr.chr
    #SNP_FILE=pop_africa/snps.txt
    #PHENO_FILES=pop_africa/phenotypes/afr_test.dat,pop_africa/phenotypes/afr_validation.dat
    #SSF-P=P
    #SSF-SNPID=ID
    #SSF-SE=SE
    #SSF-SS=OBS_CT
    #SSF-BETA=BETA
    #SSF-REF=REF
    #SSF-ALT=A1
    #SSF-MAF=A1_FREQ
    #PF-NAME=y.binary



    Single.add_argument('--clump_prefix',    dest ='clump_prefix',    action = 'store', type=str, metavar='', default=None, help = 'prefix for files generated by clump step') 
    Single.add_argument('--beta_prefix',     dest ='beta_prefix',     action = 'store', type=str, metavar='', default=None, help = 'prefix for files generated by beta step') 
    Single.add_argument('--predict_prefix',  dest ='predict_prefix',  action = 'store', type=str, metavar='', default=None, help = 'prefix for files generated by predict step') 
    Single.add_argument('--sumstats_suffix', dest ='sumstats_suffix', action = 'store', type=str, metavar='', default=None, help = 'Sumstats Suffix') 
    Single.add_argument('--ssf-p',           dest='ssf-p'     ,action='store',type=str,metavar='',   default='P',          help='Sumstats field: P-value') 
    Single.add_argument('--ssf-snpid',       dest='ssf-snpid', action='store',type=str,metavar='',   default='ID',          help='Sumstats field: snpID') 
    Single.add_argument('--ssf-se',          dest='ssf-se',    action='store',type=str,metavar='',   default='SE',          help='Sumstats field: standard error') 
    Single.add_argument('--ssf-ss',          dest='ssf-ss',    action='store',type=str,metavar='',   default='OBS_CT',          help='Sumstats Field: Sample Size') 
    Single.add_argument('--ssf-beta',        dest='ssf-beta',  action='store',type=str,metavar='',   default='BETA',          help='Sumstats Field: beta') 
    Single.add_argument('--ssf-ref',         dest='ssf-ref',   action='store',type=str,metavar='',   default='REF',          help='Sumstats Field: reference allele') 
    Single.add_argument('--ssf-alt',         dest='ssf-alt',   action='store',type=str,metavar='',   default='A1',          help='Sumstats Field: alt allele') 
    Single.add_argument('--ssf-maf',         dest='ssf-maf',   action='store',type=str,metavar='',   default='A1_FREQ',          help='Sumstats Field: MAF') 
    Single.add_argument('--phenotype',        dest='phenotype',                action='store',type=str,metavar='',   default=None,          help='Phenotype File Field: name') 
    Single.add_argument('--covariates',  dest='covariates',   action='store',type=str,metavar='',   default=None,          help='Phenotype File Field: covariates') 
    Single.add_argument('--max_clump_size',  dest='max_clump_size',   action='store',type=int , default =  '0', metavar='',  help='Max Size for Clumping') 
    #Single.add_argument('--min_maf',  dest='min_maf',   action='store',type=float , default = 0.001, metavar='',  help='Clump minumum MAF') 
    Single.add_argument('--thinned_snplist', dest='thinned_snplist', action='store', type = str, default = '0', metavar = '', help = 'Thinned snp list for large clumps') 

    
    Build = MyParser(add_help=False)
    Build.formatter_class = argparse.RawTextHelpFormatter
    Build.add_argument('--optimize_prefix', dest = 'optimize_prefix', action = 'store', type=str, default=None, metavar='',help = 'prefix for files generated by optimize step') 
    
    
    Bridge = MyParser(add_help=False)
    Bridge.formatter_class = argparse.RawTextHelpFormatter
    Bridge.add_argument('--model_file', dest = 'model_file', action = 'store', type=str, default=None, metavar='',help = 'large population model file') 
    Bridge.add_argument('--fst', dest='fst',action='store',type=str,metavar='',default=0.15,help='fst value') 
    
    Easyrun = MyParser(add_help=False, formatter_class = argparse.RawTextHelpFormatter)
    #Easyrun.add_argument('--pop_configs',  nargs=2,dest='pop_configs',  type=str,required=True,  help='Population Files')  
    #Easyrun.add_argument('--pops',  nargs=2,   dest='popnames',      type=parser.force_caps,required=True,   help='Population Names')  
    Easyrun.add_argument('--results',  nargs='+',   dest='results',      type=str, default=[],   help='One or More PRS Result Files')  
    
    
    # optimize 
    #Check = MyParser(add_help=False, formatter_class = argparse.RawTextHelpFormatter)
    #Check.add_argument('--pop_configs',  nargs=2,dest='pop_configs',  type=str,required=True,  help='Population Files')  
    #Check.add_argument('--pops',  nargs=2,   dest='popnames',      type=parser.force_caps,required=True,   help='Population Names')  
    #Check.add_argument('--results',  nargs='+',   dest='results',      type=str, default=[],   help='One or More PRS Result Files')  
    check             = subs.add_parser('check', help=parser.help_str('check')).add_subparsers(help=(sub_help),dest='cmd',title="Commands")
    check.required    = True
    requirements                  = check.add_parser('requirements',      parents=[Global,Single,Build,Bridge,Easyrun], help=parser.sub_help_str('requirements'))
    pop                           = check.add_parser('data',              parents=[Global,Single,Build,Bridge,Easyrun], help=parser.sub_help_str('data'))
    

    
    
    
    
    easyrun             = subs.add_parser('easyrun', help=parser.help_str('easyrun')).add_subparsers(help=(sub_help),dest='cmd',title="Commands")
    easyrun.required    = True
    go                  = easyrun.add_parser('go',      parents=[Global,Single,Build,Bridge,Easyrun], help=parser.sub_help_str('go'))
    
    

        
    # Option 1 - Single Pop, Ridge Regression # 
    prs             = subs.add_parser('prs-single', help=parser.help_str('prs-single')).add_subparsers(help=sub_help,dest='cmd',title="Commands")
    prs.required    = True
    prs.formatter_class = argparse.RawTextHelpFormatter
    run             = prs.add_parser('run',      parents=[Global,Single], help=parser.sub_help_str('run'))
    clump           = prs.add_parser('clump',    parents=[Global,Single],     help=parser.sub_help_str('clump'))
    betauate        = prs.add_parser('beta',     parents=[Global,Single],     help=parser.sub_help_str('beta'))
    predict         = prs.add_parser('predict',  parents=[Global,Single], help=parser.sub_help_str('predict'))
    quantify        = prs.add_parser('quantify', parents=[Global,Single], help=parser.sub_help_str('quantify'))
    
    
    # Option 1b - Build Euro Model #  
    build             = subs.add_parser('build-model', help=parser.help_str('build')).add_subparsers(help=(sub_help),dest='cmd',title="Commands")
    build.required    = True
    build.formatter_class = argparse.RawTextHelpFormatter
    run               = build.add_parser('run',         parents=[Global,Single, Build], help=parser.sub_help_str('run'))
    clump             = build.add_parser('clump',       parents=[Global,Single],        help=parser.sub_help_str('clump'))
    beta          = build.add_parser('beta',        parents=[Global,Single],        help=parser.sub_help_str('beta'))
    optimize          = build.add_parser('optimize',    parents=[Global,Single, Build], help=parser.sub_help_str('optimize'))
    prior             = build.add_parser('prior',       parents=[Global,Single, Build], help=parser.sub_help_str('prior'))
    

    # beta should be beta , predict should be test or beta, and quantify should by apply # 


    # Option 2 - Multi-pop, PRS Portability # 
    prs_port        = subs.add_parser('prs-port', help=parser.help_str('prs-port')).add_subparsers(help=(sub_help),dest='cmd',title="Commands")
    prs_port.required    = True
    prs.formatter_class = argparse.RawTextHelpFormatter
    run             = prs_port.add_parser('run',      parents=[Global,Single,Bridge], help=parser.sub_help_str('run'))
    predict         = prs_port.add_parser('predict',  parents=[Global,Single,Bridge], help=parser.sub_help_str('predict'))
    quantify        = prs_port.add_parser('quantify', parents=[Global,Single,Bridge], help=parser.sub_help_str('quantify'))


    # Option 3 - Multi-pop, Bridge Regression  # 
    prs_bridge        = subs.add_parser('prs-prior', help=parser.help_str('prs-prior')).add_subparsers(help=(sub_help),dest='cmd',title="Commands")
    prs_bridge.required    = True
    run             = prs_bridge.add_parser('run',      parents=[Global,Single,Bridge], help=parser.sub_help_str('run'))
    clump           = prs_bridge.add_parser('clump',    parents=[Global,Single,Bridge],     help=parser.sub_help_str('clump'))
    beta        = prs_bridge.add_parser('beta',     parents=[Global,Single,Bridge],     help=parser.sub_help_str('beta'))
    predict         = prs_bridge.add_parser('predict',  parents=[Global,Single,Bridge], help=parser.sub_help_str('predict','prs-prior'))
    quantify        = prs_bridge.add_parser('quantify', parents=[Global,Single,Bridge], help=parser.sub_help_str('quantify','prs-prior'))

    # Option 4 - Analysis # 
    
    Analyze = MyParser(add_help=False, formatter_class = argparse.RawTextHelpFormatter)
    Analyze.add_argument('--results',  nargs='+',dest='results',type=str,required=True,help='One or More PRS Result Files')  
    
    analyze             = subs.add_parser('analyze', help=parser.help_str('analyze')).add_subparsers(help=(sub_help),dest='cmd',title="Commands")
    analyze.required    = True
    result            = analyze.add_parser('result',       parents=[Global,Analyze],     help=parser.sub_help_str('result'))
    combine            = analyze.add_parser('combine',     parents=[Global,Analyze],     help=parser.sub_help_str('combine'))






########################################################################################################################################################################

########################################################################################################################################################################
########################################################################################################################################################################
    
    args = parser.parse_args()
    if args.cores == 0: args.cores = int(multiprocessing.cpu_count())-1
    if args.platform not in ['mac','linux']:  parser.error('Unrecognized platform '+args.platform+' (--platform linux/mac are supported)') 
    
    #if args.popname is None:
    #    if args.module != 'easyrun': parser.error('the following arguments are required: -p (popname)') 
    #    if args.module == 'easyrun': args.popname = args.popnames[0] 
    
    
    cwd, mydir = os.getcwd(), "/".join(os.path.abspath(sys.argv[0]).split('/')[0:-1])
    
    from src.Python.BridgePRS import BridgePRS
    bridgePRS = BridgePRS(args,mydir,cwd,sys.argv)
    sys.exit() 

